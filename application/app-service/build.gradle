plugins {
    id 'application'
    id 'com.palantir.git-version' version '0.15.0'
}

group = 'co.com.leronarenwino'
version = project.hasProperty('version') ? project.property('version') : 'unspecified'

application {
    mainClass = 'co.com.leronarenwino.Main'
    applicationDefaultJvmArgs = ["--enable-native-access=ALL-UNNAMED"]
}

jar {
    archiveFileName.set("${rootProject.name}-${project.version}.jar")

    manifest {
        attributes(
                'Main-Class': application.mainClass.get(),
                'Implementation-Version': project.version
        )
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    from {
        configurations.runtimeClasspath
            .findAll {
                def n = it instanceof File ? it.name : it.toString()
                !(n.endsWith('.dll') || n.endsWith('.so') || n.endsWith('.dylib'))
            }
            .collect { f ->
                if (f instanceof File && f.isDirectory()) {
                    f
                } else {
                    def n = f instanceof File ? f.name : f.toString()
                    if (n.endsWith('.jar') || n.endsWith('.zip')) {
                        zipTree(f)
                    } else {
                        null
                    }
                }
            }
            .findAll { it != null }
    }

    exclude('**/*.dll', '**/*.so', '**/*.dylib')
}

tasks.register('copyFlatlafNatives', Copy) {
    from {
        configurations.runtimeClasspath.findAll {
            def n = it instanceof File ? it.name : it.toString()
            n.endsWith('.dll') || n.endsWith('.so') || n.endsWith('.dylib')
        }
    }
    into layout.buildDirectory.dir("libs").get().asFile
}

tasks.named('distZip').configure { dependsOn tasks.named('copyFlatlafNatives') }
tasks.named('distTar').configure { dependsOn tasks.named('copyFlatlafNatives') }
tasks.named('startScripts').configure { dependsOn tasks.named('copyFlatlafNatives') }

tasks.register('dist', Copy) {
    dependsOn 'build', 'copyFlatlafNatives'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from(jar)
    from(layout.buildDirectory.dir("libs"))
    into layout.buildDirectory.dir("libs").get().asFile
}

dependencies {
    implementation project(':gui')
}
