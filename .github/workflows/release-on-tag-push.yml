name: Release JAR on tag push

on:
  create:
    tags:
      - '*.*.*'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout código
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Grant execute permission to Gradle wrapper
        run: chmod +x gradlew

      - name: Extraer versión sin 'v' del tag
        id: get_version
        run: echo "version=$(echo ${{ github.ref_name }} | sed 's/^v//')" >> $GITHUB_OUTPUT

      - name: Obtener nombre del proyecto raíz de Gradle
        id: get_root_project_name
        run: |
          echo "root_project_name=$(grep -Eo "rootProject\.name\s*=\s*['\"][^'\"]+['\"]" settings.gradle | cut -d '=' -f 2 | tr -d " '\"")" >> $GITHUB_OUTPUT

      - name: Build JAR (Pasando la versión explícitamente)
        run: ./gradlew :app-service:clean :app-service:build -Pversion=${{ steps.get_version.outputs.version }}

      - name: Mostrar archivos generados (verificar el nombre)
        run: ls -R application/app-service/build/libs || echo "Directorio vacío o no existe"

      - name: Generar notas del release desde los mensajes de commits
        id: generate_release_notes
        run: |
          CURRENT_TAG=${{ github.ref_name }}
          # Intenta encontrar el tag anterior. Si es el primer tag, usa el commit inicial del repo.
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 ${CURRENT_TAG}^ 2>/dev/null || echo "$(git rev-list --max-parents=0 HEAD | head -n 1)")

          echo "Buscando commits entre ${PREVIOUS_TAG} y ${CURRENT_TAG}"

          # Captura los mensajes de commit.
          # '--no-merges' excluye commits de merge para un historial más limpio.
          # '--pretty=format:'- %s'' formatea cada commit con un guion y el mensaje.
          # Se excluye el mensaje del propio commit del tag actual.
          RELEASE_NOTES=$(git log --no-merges --pretty=format:'- %s' "${PREVIOUS_TAG}..${CURRENT_TAG}" --invert-grep --grep="^${CURRENT_TAG}$" || true)

          # Si no hay commits (ej., primer tag o solo el commit del tag), añade un mensaje por defecto.
          if [ -z "$RELEASE_NOTES" ]; then
            RELEASE_NOTES="- No hay cambios de commits detallados detectados desde el tag anterior."
          fi

          # Usa la sintaxis 'EOF' para generar una salida multi-línea.
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "### Cambios en esta versión (${{ steps.get_version.outputs.version }}):" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "${RELEASE_NOTES}" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "---" >> $GITHUB_OUTPUT
          echo "Generado automáticamente por GitHub Actions." >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Copiar nativos de FlatLaf a build/libs para el release
        run: |
          mkdir -p application/app-service/build/libs
          cp application/app-service/build/dist/*.dll application/app-service/build/libs/ 2>/dev/null || true
          cp application/app-service/build/dist/*.so application/app-service/build/libs/ 2>/dev/null || true
          cp application/app-service/build/dist/*.dylib application/app-service/build/libs/ 2>/dev/null || true

      - name: Crear y Subir Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ steps.get_version.outputs.version }}
          body: ${{ steps.generate_release_notes.outputs.notes }}
          draft: false
          prerelease: false
          files: |
            application/app-service/build/libs/${{ steps.get_root_project_name.outputs.root_project_name }}-${{ steps.get_version.outputs.version }}.jar
            application/app-service/build/libs/*.dll
            application/app-service/build/libs/*.so
            application/app-service/build/libs/*.dylib
